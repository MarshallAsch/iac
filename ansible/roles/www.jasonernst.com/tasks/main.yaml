- name: Create nginx directory on host
  tags: proxy
  become: true
  file:
    path: /etc/nginx/conf.d
    state: directory
    mode: '755'
    owner: root
    group: root

- name: Copy nginx config to host
  tags: proxy
  become: true
  copy:
    src: conf/proxy.conf
    dest: /etc/nginx/conf.d
    mode: '644'
    owner: root
    group: root

- name: pull and run the nginx reverse proxy
  tags: proxy
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: nginx-proxy
    image: jwilder/nginx-proxy
    published_ports: 80:80,443:443
    volumes: /etc/nginx/conf.d:/etc/nginx/conf.d,vhost:/etc/nginx/vhost.d,html:/usr/share/nginx/html,dhparam:/etc/nginx/dhparam,certs:/etc/nginx/certs:ro,/var/run/docker.sock:/tmp/docker.sock:ro
    network_mode: bridge
    restart_policy: unless-stopped

- name: pull and run the lets encypt companion to the proxy
  tags: letsencrypt
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes: certs:/etc/nginx/certs:rw,/var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from: nginx-proxy
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      ENABLE_IPV6: "true"

- name: Copy .env to the host
  tags: website
  become: true
  copy:
    src: conf/prod.env
    dest: /opt/goblog/prod/.env
    mode: '644'
    owner: root
    group: root

# todo: move this perhaps to a db role so that websites without dbs don't need it
- name: pull and run the mysql db
  tags: db
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: db
    image: mysql
    env_file: /opt/goblog/prod/.env
    network_mode: bridge
    restart_policy: unless-stopped

- name: pull and run the app container for www.jasonernst.com
  tags: website
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: www.jasonernst.com
    image: compscidr/goblog:v0.1.26
    volumes: /opt/goblog/prod/uploads:/go/src/github.com/compscidr/goblog/www/uploads
    mounts:
      - source: /opt/goblog/prod/test.db
        target: /go/src/github.com/compscidr/goblog/test.db
        type: bind
      - source: /opt/goblog/prod/.env
        target: /go/src/github.com/compscidr/goblog/.env
        type: bind
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      VIRTUAL_HOST: "www.jasonernst.com,jasonernst.com"
      VIRTUAL_PORT: "7000"
      LETSENCRYPT_HOST: "www.jasonernst.com,jasonernst.com"
      LETSENCRYPT_EMAIL: "ernstjason1@gmail.com"

- name: Adds a crontab entry to to backup website
  ansible.builtin.cron:
    name: "backup www.jasonernst.com"
    minute: "0"
    hour: "3"
    job: "rsync -av --delete /opt/goblog/prod/ home.jasonernst.com:/storage/backup/www.jasonernst.com/"

- name: Create Ombi Directories
  file:
    path: /etc/ombi
    state: directory

- name: Ombi Docker Container
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: ombi
    image: linuxserver/ombi:latest
    pull: true
    volumes:
      - "/etc/ombi:/config:rw"
    env:
      TZ: "America/Los_Angeles"
      PUID: "0"
      PGID: "0"
      VIRTUAL_HOST: "ombi.jasonernst.com"
      VIRTUAL_PORT: "3579"
      LETSENCRYPT_HOST: "ombi.jasonernst.com"
      LETSENCRYPT_EMAIL: "ernstjason1@gmail.com"
    restart_policy: unless-stopped
    memory: "1g"

- name: Create Livepeer Directories
  tags: livepeer
  file:
    path: /root/.lpData/mainnet/keystore
    state: directory

- name: Copy Ethereum Wallet to Livepeer
  tags: livepeer
  copy:
    src: files/UTC--2016-03-12T21-58-48.509345400Z--74ba897f65f04008d8eff364efcc54b0a20e17eb
    dest: /root/.lpData/mainnet/keystore/UTC--2016-03-12T21-58-48.509345400Z--74ba897f65f04008d8eff364efcc54b0a20e17eb
    mode: '0600'

- name: Deploy Livepeer Orchestrator (with optional transcoder running too)
  tags: livepeer
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  community.docker.docker_container:
    name: livepeer
    image: livepeer/go-livepeer:master
    pull: true
    restart_policy: unless-stopped
    ports:
      - 8935:8935
      - 7935:7935
    command: -network mainnet -ethUrl https://mainnet.infura.io/v3/{{ infura_secret }} -ethAcctAddr 0x74ba897f65f04008d8eff364efcc54b0a20e17eb -orchestrator -pricePerUnit 995 -serviceAddr lp.jasonernst.com:8935 -reward=false -orchSecret {{ orchSecret }} --ethPassword {{ ethPassword }} -monitor
    volumes:
      - "/root/.lpData:/root/.lpData"
    etc_hosts:
      lp.jasonernst.com: 127.0.0.1
      jasonernst.com: 172.17.0.1

- name: Create Prometheus Directories
  tags: prometheus
  file:
    path: /etc/prometheus
    state: directory

# https://forum.livepeer.org/t/guide-transcoder-monitoring-with-prometheus-grafana/1225
- name: Copy Prometheus Config
  tags: prometheus
  copy:
    src: files/prometheus.yml
    dest: /etc/prometheus/prometheus.yml
    mode: '0600'

- name: Deploy Prometheus
  tags: prometheus
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  community.docker.docker_container:
    name: prometheus
    image: prom/prometheus
    pull: true
    restart_policy: unless-stopped
    ports:
      - 9000:9000
      - 9090:9090
    volumes:
      - "/root/.ethereum:/root/.ethereum"

# access with: ssh -L 3000:localhost:3000 -N jasonernst.com
# and then localhost:3000
- name: Deploy Grafana
  tags: grafana
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  community.docker.docker_container:
    name: grafana
    image: grafana/grafana-oss
    pull: true
    restart_policy: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - "grafana-storage:/var/lib/grafana"
