- name: Create nginx directory on host
  tags: proxy
  become: true
  file:
    path: /etc/nginx/conf.d
    state: directory
    mode: '755'
    owner: root
    group: root

- name: Copy nginx config to host
  tags: proxy
  become: true
  copy:
    src: conf/proxy.conf
    dest: /etc/nginx/conf.d
    mode: '644'
    owner: root
    group: root

- name: pull and run the nginx reverse proxy
  tags: proxy
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: nginx-proxy
    image: jwilder/nginx-proxy
    published_ports: 80:80,443:443
    volumes: /etc/nginx/conf.d:/etc/nginx/conf.d,vhost:/etc/nginx/vhost.d,html:/usr/share/nginx/html,dhparam:/etc/nginx/dhparam,certs:/etc/nginx/certs:ro,/var/run/docker.sock:/tmp/docker.sock:ro
    network_mode: bridge
    restart_policy: unless-stopped

- name: pull and run the lets encypt companion to the proxy
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes: certs:/etc/nginx/certs:rw,/var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from: nginx-proxy
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      ENABLE_IPV6: "true"

- name: Copy .env to the host
  tags: website
  become: true
  copy:
    src: conf/prod.env
    dest: /opt/goblog/prod/.env
    mode: '644'
    owner: root
    group: root

# todo: move this perhaps to a db role so that websites without dbs don't need it
- name: pull and run the mysql db
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: db
    image: mysql
    env:
      MYSQL_ROOT_PASSWORD: rootpassword
    network_mode: bridge
    restart_policy: unless-stopped

- name: pull and run the app container for www.jasonernst.com
  tags: website
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: www.jasonernst.com
    image: compscidr/goblog:v0.1.24
    volumes: /opt/goblog/prod/uploads:/go/src/github.com/compscidr/goblog/uploads
    mounts:
      - source: /opt/goblog/prod/test.db
        target: /go/src/github.com/compscidr/goblog/test.db
        type: bind
      - source: /opt/goblog/prod/.env
        target: /go/src/github.com/compscidr/goblog/.env
        type: bind
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      VIRTUAL_HOST: "www.jasonernst.com,jasonernst.com"
      VIRTUAL_PORT: "7000"
      LETSENCRYPT_HOST: "www.jasonernst.com,jasonernst.com"
      LETSENCRYPT_EMAIL: "ernstjason1@gmail.com"

- name: Adds a crontab entry to to backup website
  ansible.builtin.cron:
    name: "backup www.jasonernst.com"
    minute: "0"
    hour: "3"
    job: "rsync -av --delete /opt/goblog/prod/ home.jasonernst.com:/storage/backup/www.jasonernst.com/"

- name: Create Ombi Directories
  file:
    path: /etc/ombi
    state: directory

- name: Ombi Docker Container
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  docker_container:
    name: ombi
    image: linuxserver/ombi:latest
    pull: true
    volumes:
      - "/etc/ombi:/config:rw"
    env:
      TZ: "America/Los_Angeles"
      PUID: "0"
      PGID: "0"
      VIRTUAL_HOST: "ombi.jasonernst.com"
      VIRTUAL_PORT: "3579"
      LETSENCRYPT_HOST: "ombi.jasonernst.com"
      LETSENCRYPT_EMAIL: "ernstjason1@gmail.com"
    restart_policy: unless-stopped
    memory: "1g"
